# ######################################
# #                NAME                #
# ######################################
# The name of the configuration.
name = PropertiesConfig

# ######################################
# #              STATUS                #
# ######################################
# The level of internal Log4j events that should be logged to the console.
# Valid values for this attribute are "trace", "debug", "info", "warn", "error" and "fatal".
# Log4j will log details about initialization, rollover and other internal actions to the status logger.
# Setting status="trace" is one of the first tools available to you if you need to troubleshoot log4j.
#status = trace

# ######################################
# #        PROPERTY SUBSTITUTION       #
# ######################################
# The ability to specify tokens in the configuration as references to properties defined elsewhere -> ${filename}
#property.baseDir = linkpay_logs

appenders = console, rolling

# ######################################
# #              PATTERN               #
# ######################################
# https://logging.apache.org/log4j/2.x/manual/layouts.html
#
#                What to print                |    Conversion character   |                          Performance
#       Category name (or logger name)        |             c             |                              Fast
#        Fully qualified class name           |             C             |                              Slow
#                Date and time                |        d,d{format}        |  Slow if using JDK's formatters. Fast if using log4j's formatters
#         File name of Java class             |             F             |                         Extremely slow
#   Location (class, method and line number)  |             l             |                         Extremely slow
#             Line number only                |             L             |                         Extremely slow
#               Log message                   |             m             |                              Fast
#               Method name                   |             M             |                         Extremely slow
#            Priority (level)                 |             P             |                              Fast
#           New line separator                |             n             |                              Fast
#             Thread name                     |             t             |                              Fast
#      Time elapsed (milliseconds)            |             r             |                              Fast
#   Thread\u2019s nested diagnostic context        |             x             |                              Fast
#   Thread\u2019s mapped diagnostic context        |             X             |                              Fast
#            Percent sign                     |            %%             |                              Fast
appender.console.type = Console
appender.console.name = STDOUT
# Each appender can have a layout, layout is responsible for formatting the log event.
# If we want to use our custom layout pattern the layout type must be PatternLayout
# The PatternLayout, is part of the standard log4j distribution
# and lets us specify the output format according to conversion
# patterns similar to the C language printf function.
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = [%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n

appender.rolling.type = RollingFile
appender.rolling.name = RollingFile
appender.rolling.fileName = ${sys:projectPath}/.logs/log.md
appender.rolling.filePattern =  ${sys:projectPath}/.logs/$${date:yyyy-MM}/log-%d{yyyy-MM-dd}-%i.md.gz
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = [%-5level] %d{yyyy-MMM-dd HH:mm:ss.SSS} %c{1.} [%t] %msg%n
appender.rolling.policies.type = Policies
appender.rolling.policies.time.type = CronTriggeringPolicy
appender.rolling.policies.time.schedule = 0 0 0 * * ?
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
appender.rolling.policies.size.size= 10MB
appender.rolling.strategy.type= DefaultRolloverStrategy
appender.rolling.strategy.max= 30


# ######################################
# #         CUSTOMIZED LOGGER          #
# ######################################
# This will create a new logger named rolling, we can add logging for any class that we want
# imagine that we want to trace exception controller class, here instead of rolling we will use
# com.mabnacard.linkpay.core.web.controller.ExceptionCtrl and after that we can assign any log level
# that we want.here if we assign trace level for this class or if we use rolling just this level
# will be assigned to that specific class. here is a rule of thumb pay attention to the log level
# you set.it may sometimes print your log twice that's because of the parent logger( maybe root) and
# the logger you set. for omitting the repeat you can use additivity, if you set it to false
# the result of the log won't be repeated.If the attribute is omitted the default value of false will be used.
# here we have used for the rolling. for more information on log levels you can check "LOG LEVEL RELATIONS" section below


# ######################################
# #         LOG LEVEL RELATIONS        #
# ######################################
# the vertical header shows the Level of the LogEvent,
# while the horizontal header shows the Level associated with the appropriate LoggerConfig.
# If no level is specified it will default to ERROR

#           TRACE    DEBUG    INFO   WARN   ERROR    FATAL    OFF
# ALL     |  YES   |  YES  |  YES  | YES  |  YES   |  YES  |  NO
# TRACE   |  YES   |  NO   |  NO   | NO   |  NO    |  NO   |  NO
# DEBUG   |  YES   |  YES  |  NO   | NO   |  NO    |  NO   |  NO
# INFO    |  YES   |  YES  |  YES  | NO   |  NO    |  NO   |  NO
# WARN    |  YES   |  YES  |  YES  | YES  |  NO    |  NO   |  NO
# ERROR   |  YES   |  YES  |  YES  | YES  |  YES   |  NO   |  NO
# FATAL   |  YES   |  YES  |  YES  | YES  |  YES   |  YES  |  NO
# OFF     |  NO    |  NO   |  NO   | NO   |  NO    |  NO   |  NO

loggers = rolling

logger.rolling.name = org.apache.logging.log4j.core.appender.rolling
logger.rolling.level = WARN
logger.rolling.additivity = false
logger.rolling.appenderRefs = rolling
logger.rolling.appenderRef.rolling.ref = RollingFile

# ######################################
# #             ROOT LOGGER            #
# ######################################
#Every configuration must have a root logger.
rootLogger.level = DEBUG
rootLogger.appenderRefs = stdout, rollingfile
rootLogger.appenderRef.stdout.ref = STDOUT
rootLogger.appenderRef.rolling.ref = RollingFile